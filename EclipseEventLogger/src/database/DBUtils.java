/*
 * 7/25/2018: Added the overloaded method to write to the flattened table on the MySQL server -- nicholdw
 */
package database;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.HashMap;

import com.mysql.cj.jdbc.MysqlDataSource;

import utilities.GeneralUtils;

public class DBUtils {

	private final static String configFilePath = System.getProperty("user.home") + "\\EclipseEventLogConfig\\config.txt";
	private static Connection DBConnection;
	
	/***
	 * Write a flattened record to the database
	 * @param userMacAddress MAC Address of this computer
	 * @param eventMessage Message generated by Eclipse
	 * @param eventType Runtime/Compiletime
	 * @param fileName File source file where the event was generated. User is probably editing this file.
	 * @throws SQLException
	 */
	public static void addRecordToDB(String userMacAddress, String eventMessage, String eventType, String fileName, String problemCode, int lineNumber) throws SQLException {
		Timestamp currentTimestamp = new Timestamp(System.currentTimeMillis());
		
		PreparedStatement pStmt = DBConnection.prepareStatement("INSERT INTO `tRecordDW`(`userMacAddress`, `eventMessage`, `TimeOfRecording`, `eventType`, `fileName`, `problemCode`, `lineNumber`) VALUES (?, ?, ?, ?, ?, ?, ?)");
		
		pStmt.setString(1, userMacAddress);
		pStmt.setString(2, eventMessage);
		pStmt.setTimestamp(3, currentTimestamp);
		pStmt.setString(4, eventType);
		pStmt.setString(5, fileName);
		pStmt.setString(6, problemCode);
		pStmt.setInt(7, lineNumber);
		
		pStmt.execute();
	}
	
	public static Connection getDBConnection() {
		return DBConnection;
	}
	
	public static void setDBConnection(Connection conn) {
		DBConnection = conn;
	}
	
	public static MysqlDataSource readConfigFileToDS() {
		MysqlDataSource databaseDS = new MysqlDataSource();
		
		String configFileText = GeneralUtils.getAllTextFromFile(configFilePath);
		String[] configFileLines = configFileText.split(System.lineSeparator());
		HashMap<String, String> databaseInfo = new HashMap<String,String>();
		int configFileLineKey = 0;
		int configFileLineValue = 1;
		
		for(String line : configFileLines) {
			String[] lineParts = line.split("=");
			databaseInfo.put(lineParts[configFileLineKey], (lineParts.length > 1) ? lineParts[configFileLineValue] : "");
		}
		
		try {
			databaseDS.setUseSSL(false);
			databaseDS.setDatabaseName(databaseInfo.get("Database"));
			databaseDS.setServerName(databaseInfo.get("Server"));
			databaseDS.setUser(databaseInfo.get("Username"));
			databaseDS.setPassword(databaseInfo.get("Password"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return databaseDS;
	}
	
	public static void createConfigFile() throws IOException {
		File configFile = new File(configFilePath);
		
		configFile.getParentFile().mkdirs();
		configFile.createNewFile();
		
		GeneralUtils.writeToFile(configFile.getPath(), "Server=localhost" + System.lineSeparator() + "Database=EclipseEventLog" + System.lineSeparator() + "Username=EclipseEventLog" + System.lineSeparator() + "Password=P@ssword");
	}
	
	public static boolean configFileExists() {
		return new File(configFilePath).exists();
	}

}
